#version 460

#extension GL_EXT_ray_tracing : enable
#extension GL_EXT_ray_query : enable
#extension GL_GOOGLE_include_directive : enable
#extension GL_EXT_debug_printf : enable

#include "../../src/glsl_cpp_common.h"

// --- Macros ---
#define HitInfo0 HitInfo( false, 0.0, vec3(0), vec3(0), RTMaterial(vec4(0), vec4(0), vec4(0), 0.0) )

// --- Constants ---
const float PI = radians(180);
const bool  CULL_FACE = true;
const bool  CLIP_MESHES = false; // Disable until triangle raycasting becomes more expensive
const int   RAY_SUBDIVISIONS = 15;
const float RAY_STEP_RANDOMNESS = 0.025;

const float kEpsilion = 0.001; // Rename to K_EPSILION?

// --- Structs ---
// Hit information
struct HitInfo {
    bool        didHit;
    float       dist;
    vec3        pos;
    vec3        normal;
    RTMaterial    material;
};

// Ray
struct Ray {
    vec3 origin;
    vec3 dir;
    bool destroyed;
};

// --- Input/Output ---
layout (push_constant) uniform FrameUBO {
    RTFrame frame;
};

// UBO input parameters
layout (binding = b_params) uniform ParameterUBO {
    RTParams ubo;
};

// Spheres in and out
layout(std140, binding = b_spheres) readonly buffer SphereSSBOIn {
   RTSphere spheresIn[ ];
};

layout(std140, binding = b_blackholes) readonly buffer BlackholeSSBOIn {
   RTBlackhole blackholesIn [ ];
};

// Output storage image
layout (binding = b_image, rgba8) writeonly uniform image2D image;

// Skybox texture
layout(binding = b_skybox) uniform sampler2D imageSampler;

layout(std140, binding = b_torus) readonly buffer TorusSSBOIn {
   RTTorus torusIn [ ];
};

// --- Randomness functions ---

// www.pcg-random.org, www.shadertoy.com/view/XlGcRh
/**
 * Generates a psuedo-random unsigned integer with value [0, 2^32 - 1].
 *
 * @param seed The seed, which is changed after use.
 * @return A psuedo-random unsigned integer.
 */
uint randInt(inout uint seed) {
    seed = seed * 747796405 + 2891336453;
    uint result = ((seed >> ((seed >> 28) + 4)) ^ seed) * 277803737;
    result = (result >> 22) ^ result;
    return result;
}

/**
 * Generates a psuedo-float with value [0, 1].
 *
 * @param seed The seed, which is changed after use. 
 * @return A psuedo-random float.
 */
float randFloat(inout uint seed) {
    return randInt(seed) / 4294967295.0; // 2^32 - 1
}

// https://stackoverflow.com/a/6178290
/**
 * Generates a normal-distributed psuedo-random float.
 *
 * @param seed The seed, which is changed after use. 
 * @return A normal-distributed psuedo-random float.
 */
float randFloatNormDist(inout uint seed) {
    float theta = 2 * PI * randFloat(seed);
    float rho = sqrt(abs(-2 * log(randFloat(seed))));
    return rho * cos(theta);
}

/**
 * Generates a normal-distributed psuedo-random 2D vector.
 *
 * @param seed The seed, which is changed after use. 
 * @return A normal-distributed psuedo-random vec2 for use in polar spaces.
 */
vec3 randVecNormDist(inout uint seed) {
    float x = randFloatNormDist(seed),
            y = randFloatNormDist(seed),
            z = randFloatNormDist(seed);
    return normalize(vec3(x, y, z));	
}

/**
 * Geneates a normal-distributed psuedo-random 2D vector.
 * While randVecNormDist() generates a normal-distribution for polar coordinates, this function does so for a square (cartesian space). 
 *
 * @param seed The seed, which is changed after use. 
 * @return A normal-distributed psuedo-random vec2 for use in cartesian spaces.
 */
vec2 randVecCartesianNormDist(inout uint seed) {
    float ang = randFloat(seed) * 2 * PI;
    vec2 pos = vec2(cos(ang), sin(ang));
    return pos * sqrt(abs(randFloatNormDist(seed))); // Normal distribution
}

// --- Environment functions ---
vec3 CartesianToSpherical(vec3 cartesian) {
	return vec3 (
		sqrt(cartesian.x*cartesian.x + cartesian.y*cartesian.y + cartesian.z*cartesian.z),
		atan(cartesian.y / cartesian.x),
		atan(sqrt(cartesian.x*cartesian.x + cartesian.y*cartesian.y)/cartesian.z)
	);
}

/**
 * Gets the environment light where a ray goes.
 *
 * @param ray The ray.
 * @return The environment light for the ray. 
 */
vec3 GetEnvironmentLight(Ray ray) {
	vec2 uv = CartesianToSpherical(ray.dir).yz/PI-vec2(0.5,0.5) + vec2(frame.frameNumber, frame.frameNumber / 3.f) / 1800.f;
    vec3 col = texture(imageSampler, uv).rgb; float col_m = length(col); if (col_m > 0.f) col /= col_m;
    return col * pow(col_m, 3);
}


vec4 iTorus( in vec3 ro, in vec3 rd, in vec2 tor )
{
    float po = 1.0;
    
    float Ra2 = tor.x*tor.x;
    float ra2 = tor.y*tor.y;
	
    float m = dot(ro,ro);
    float n = dot(ro,rd);

    // bounding sphere
    {
        float h = n*n - m + (tor.x+tor.y)*(tor.x+tor.y);
        if( h<0.0 ) return vec4(-1.0);
    }

    // find quartic equation
    float k = (m - ra2 - Ra2)/2.0;
    float k3 = n;
    float k2 = n*n + Ra2*rd.z*rd.z + k;
    float k1 = k*n + Ra2*ro.z*rd.z;
    float k0 = k*k + Ra2*ro.z*ro.z - Ra2*ra2;
	
#if 1
    // prevent |c1| from being too close to zero
    if( abs(k3*(k3*k3 - k2) + k1) < 0.01 )
    {
        po = -1.0;
        float tmp=k1; k1=k3; k3=tmp;
        k0 = 1.0/k0;
        k1 = k1*k0;
        k2 = k2*k0;
        k3 = k3*k0;
    }
#endif

    float c2 = 2.0*k2 - 3.0*k3*k3;
    float c1 = k3*(k3*k3 - k2) + k1;
    float c0 = k3*(k3*(-3.0*k3*k3 + 4.0*k2) - 8.0*k1) + 4.0*k0;

    c2 /= 3.0;
    c1 *= 2.0;
    c0 /= 3.0;
    
    float Q = c2*c2 + c0;
    float R = 3.0*c0*c2 - c2*c2*c2 - c1*c1;
    
    float h = R*R - Q*Q*Q;
    float z = 0.0;
    if( h < 0.0 )
    {
        // 4 intersections
        float sQ = sqrt(Q);
        z = 2.0*sQ*cos( acos(R/(sQ*Q)) / 3.0 );
    }
    else
    {
        // 2 intersections
        float sQ = pow( sqrt(h) + abs(R), 1.0/3.0 );
        z = sign(R)*abs( sQ + Q/sQ );
    }		
    z = c2 - z;
	
    float d1 = z   - 3.0*c2;
    float d2 = z*z - 3.0*c0;
    if( abs(d1) < 1.0e-4 )
    {
        if( d2 < 0.0 ) return vec4(-1.0);
        d2 = sqrt(d2);
    }
    else
    {
        if( d1 < 0.0 ) return vec4(-1.0);
        d1 = sqrt( d1/2.0 );
        d2 = c1/d1;
    }

    //----------------------------------
	
    float result = 1e20;

    h = d1*d1 - z + d2;
    if( h > 0.0 )
    {
        h = sqrt(h);
        float t1 = -d1 - h - k3; t1 = (po<0.0)?2.0/t1:t1;
        float t2 = -d1 + h - k3; t2 = (po<0.0)?2.0/t2:t2;
        if( t1 > 0.0 ) result=t1; 
        if( t2 > 0.0 ) result=min(result,t2);
    }

    h = d1*d1 - z - d2;
    if( h > 0.0 )
    {
        h = sqrt(h);
        float t1 = d1 - h - k3;  t1 = (po<0.0)?2.0/t1:t1;
        float t2 = d1 + h - k3;  t2 = (po<0.0)?2.0/t2:t2;
        if( t1 > 0.0 ) result=min(result,t1);
        if( t2 > 0.0 ) result=min(result,t2);
    }

    // Compute world-space position
    vec3 world_pos = ro + result * rd;
    return vec4(world_pos, result);
}

vec3 nTorus( in vec3 pos, vec2 tor )
{
	return normalize( pos*(dot(pos,pos)- tor.y*tor.y - tor.x*tor.x*vec3(1.0,1.0,-1.0)));
}

mat3 rotateEuler(vec3 angles) {
    float cx = cos(angles.x);
    float sx = sin(angles.x);
    float cy = cos(angles.y);
    float sy = sin(angles.y);
    float cz = cos(angles.z);
    float sz = sin(angles.z);

    mat3 rx = mat3(
        1.0, 0.0, 0.0,
        0.0, cx, -sx,
        0.0, sx, cx
    );

    mat3 ry = mat3(
        cy, 0.0, sy,
        0.0, 1.0, 0.0,
        -sy, 0.0, cy
    );

    mat3 rz = mat3(
        cz, -sz, 0.0,
        sz, cz, 0.0,
        0.0, 0.0, 1.0
    );

    return rz * ry * rx;
}

HitInfo RayTorus(Ray ray, RTTorus torus) {
    HitInfo hitInfo = HitInfo0;
    hitInfo.didHit = false;


    vec3 rotEuler = torus.rotation_thickness.xyz + vec3( sin(frame.frameNumber / 50.f) / 10.f, cos(frame.frameNumber / 50.f) / 10.f, 0.f );
    mat3 rot = rotateEuler( rotEuler ),
         rotInv = transpose( rot );
    mat3 scale = mat3(
        1.0, 0.0, 0.0,
        0.0, 1.0, 0.0,
        0.0, 0.0, 0.5 );
    mat3 scaleInv = transpose( scale );

    vec3 ro = ray.origin,
         rd = ray.dir;

    ro = scaleInv * rotInv * (ro - torus.position_radius.xyz);
    rd = scaleInv * rotInv * rd;

    vec2    trus = vec2(torus.position_radius.w, torus.rotation_thickness.w) * 2.f;
    vec4    result = iTorus( ro, rd, trus );
    float   t = result.w;
    vec3    pos = result.xyz;

    if ( t > 0.0 ){

		vec3 nor = nTorus( pos, trus );
        hitInfo.didHit = true;
        hitInfo.pos = torus.position_radius.xyz + scaleInv * rot * pos;
        //hitInfo.dist = distance(hitInfo.pos, ray.origin);
        hitInfo.dist = distance(pos, ro);
        hitInfo.normal = nor;
        //hitInfo.material = torus.material;

        vec2 uv = CartesianToSpherical(hitInfo.pos).yz/PI-vec2(0.5,0.5) + vec2(frame.frameNumber, frame.frameNumber / 3.f) / 1800.f;
        vec3 col = texture(imageSampler, uv).rgb; float col_m = length(col); if (col_m > 0.f) col /= col_m;
        col = col * pow(col_m, 2) * 100.f * vec3(1.0,0.7,0.3) + vec3(0.5,0.2,0.1);
        hitInfo.material = RTMaterial(vec4(col, 0.2), vec4(col,1), vec4(0,0,0,0), 0.f);


    }

    return hitInfo;
}


// --- Ray intersection functions ---
/**
 * Checks for an intersection between a ray and a sphere.
 *
 * @param ray The ray.
 * @param sphere The sphere.
 *
 * @return The hit information from the (possible) intersection.
 */
HitInfo RaySphere(Ray ray, RTSphere sphere) {
    HitInfo hitInfo = HitInfo0;
    vec3 offsetRayOrigin = ray.origin - sphere.center;

    // Solve for distance with a quadratic equation
    float a = dot(ray.dir, ray.dir);
    float b = 2 * dot(offsetRayOrigin, ray.dir);
    float c = dot(offsetRayOrigin, offsetRayOrigin) - sphere.radius*sphere.radius;

    // Quadratic discriminant
    float discriminant = b * b - 4 * a * c; 

    // If d > 0, the ray intersects the sphere => calculate hitinfo
    if (discriminant >= 0) {
        float dist = (-b - sqrt(abs(discriminant))) / (2 * a);

        // (If the intersection happens behind the ray, ignore it)
        if (dist >= 0) {
            hitInfo.didHit = true;
            hitInfo.dist = dist;
            hitInfo.pos = ray.origin + ray.dir * dist;
            hitInfo.normal = normalize(hitInfo.pos - sphere.center);
            //hitInfo.material = RTMaterial(vec4(hitInfo.pos,1), vec4(0,0,0,0), vec4(0,0,0,0), 0.f);
            hitInfo.material = sphere.material;
        }
    }

    // Otherwise, ray does not intersect sphere => return blank hitinfo
    return hitInfo;
}

/**
 * Checks for an intersection between a ray and a bounding box.
 * Thanks to:   https://gist.github.com/DomNomNom/46bb1ce47f68d255fd5d
 *              https://alain.xyz/blog/ray-tracing-acceleration-structures
 *
 * @param ray The ray.
 * @param boxMin The bottom left corner of the box.
 * @param boxMax The top right corner of the box.
 *
 * @return If the ray intersects the box at all.
 */
bool RayBoundingBox(Ray ray, vec3 boxMin, vec3 boxMax) {
    vec3    rayDirInverted = 1.0 / ray.dir,
            boxMinRelative = (boxMin - ray.origin) * rayDirInverted,
            boxMaxRelative = (boxMax - ray.origin) * rayDirInverted,
            boxMinNew = min( boxMinRelative, boxMaxRelative ),
            boxMaxNew = max( boxMinRelative, boxMaxRelative );
    
    float   maxMinAxis = max( max( boxMinNew.x, boxMinNew.y ), boxMinNew.z ),
            minMaxAxis = min( min( boxMaxNew.x, boxMaxNew.y ), boxMaxNew.z );

    return maxMinAxis <= minMaxAxis;
}

// --- Raytracing functions ---
HitInfo CalculateRayCollision(Ray ray, float stepDist) {
    HitInfo closestHit = HitInfo0;
    closestHit.dist = -1;

    // Raycast toruses
    for (int i = 0; i < ubo.torusCount; i++) {
        RTTorus torus = torusIn[i];

        HitInfo hitInfo = RayTorus(ray, torus);
        if (hitInfo.didHit && hitInfo.dist <= stepDist && ( closestHit.dist < 0 || hitInfo.dist < closestHit.dist ) )
        {
            closestHit = hitInfo;
        }
    }

    // Raycast spheres
    for (int i = 0; i < ubo.spheresCount; i++) {
        RTSphere sphere = spheresIn[i];

        HitInfo hitInfo = RaySphere(ray, sphere);
        if (hitInfo.didHit && hitInfo.dist <= stepDist && ( closestHit.dist < 0 || hitInfo.dist < closestHit.dist ) )
        {
            closestHit = hitInfo;
        }
    }

    // Return the collision which occured closest to the origin
    return closestHit;
}

void SampleLineSegment(inout Ray ray, inout float stepDist, inout vec3 incomingLight, inout vec3 rayColor, inout uint seed) {
    while ( stepDist > 0.f ) {
        // Check for ray intersection between current position and predicted
        HitInfo hitInfo = CalculateRayCollision(ray, stepDist);
        if ( hitInfo.didHit ) {
            // Update stepdist and ray
            stepDist -= hitInfo.dist;
            ray.origin = hitInfo.pos;
            RTMaterial material = hitInfo.material;

            bool 	isSpecular  = material.specularColor.w >= randFloat(seed);
            vec3 	specularDir = reflect(ray.dir, hitInfo.normal),
                    diffuseDir  = normalize(hitInfo.normal + randVecNormDist(seed));
            ray.dir = normalize(mix(diffuseDir, specularDir, material.smoothness * int(isSpecular)));

            // Sample
            vec3 emittedLight = material.emissionColor.xyz * material.emissionColor.w;
            incomingLight += emittedLight * rayColor;
            rayColor *= mix(material.color, material.specularColor, int(isSpecular)).rgb;

            // Early exit if ray color ~= 0
            // (Use some randomness to avoid "artificial" look)
            float p = max(rayColor.r, max(rayColor.g, rayColor.b));
            if (randFloat(seed) >= p) {
                ray.destroyed = true;
                return;
            }
            rayColor *= 1.0f / p;
        } else {
            ray.origin += ray.dir * stepDist;
            stepDist -= stepDist;
        }

        if ( ubo.blackholesCount <= 0 ) return;
    }
}

/**
 *  Bends the light ray's direction and outputs the predicted step distance.
 */
float BendLight(inout Ray ray, inout uint seed) {
    for (int i = 0; i < ubo.blackholesCount; i++) {
        RTBlackhole blackhole = blackholesIn[i];

        // Get direction and distance to the black hole
        vec3    dirToHole = blackhole.center - ray.origin;
        float   dist = length( dirToHole ); dirToHole /= dist;
        float   invDist = 1.f / dist;

        // Destroy ray and return if it's too close to the black hole
        if (dist < blackhole.radius) {
            ray.destroyed = true;
            return -1.f;
        }

        // Calculate forces
        float   invDistSqr = invDist * invDist;
        float   bendForce  = invDistSqr * ubo.blackholePower;
        float   spinForce  = invDistSqr * 0.f; // TODO: Add spin as a black hole property
        
        // Calculate step distance
        // (For now, this assumes only ONE black hole exists.)
        float   randomFactor = mix( 1.0-RAY_STEP_RANDOMNESS, 1.0/(1.0-RAY_STEP_RANDOMNESS), randFloat(seed) );
        float   distFactor = 0.5f * dist;
        float   stepDist = 0.1f + randomFactor * distFactor;

        // Change direction of lightray
        ray.dir = normalize( ray.dir + dirToHole * bendForce * stepDist + cross( dirToHole, vec3(0,0,1) * spinForce * stepDist ) );

        // FOR NOW; ONLY WORKS WITH ONE BLACK HOLE
        return stepDist;
    }

    return 1e9;
}

vec3 Trace(Ray ray, inout uint seed) {
    vec3 	incomingLight = vec3(0),
            rayColor = vec3(1);
    
    int rayDivision = 0;
    while (rayDivision < RAY_SUBDIVISIONS) {
        rayDivision++;

        // Create line segment from the current ray position to the predicted next one
        float stepDist = BendLight(ray, seed);
        if (ray.destroyed) break;
        SampleLineSegment(ray, stepDist, incomingLight, rayColor, seed);
        if (ray.destroyed) break;
    }

    // If the ray was not destroyed but instead went out into space, sample enironment color
    if (ray.destroyed) return vec3(0);
    return incomingLight + GetEnvironmentLight(ray) * rayColor;
}

// --- Program ---
layout (local_size_x = 32, local_size_y = 32, local_size_z = 1) in;
void main()  {
    //debugPrintfEXT("AAA\n\n\n");

    // Create seed for RNG
    vec2 uv = vec2( gl_GlobalInvocationID.x / ubo.screenSize.x, 1 - gl_GlobalInvocationID.y / ubo.screenSize.y );
    uint i = uint( gl_GlobalInvocationID.y * ubo.screenSize.x + gl_GlobalInvocationID.x );
    uint seed = i + frame.frameNumber * 719393;

    // Calculate focus point
    float   planeHeight = ubo.focusDistance * tan(ubo.fov * 0.5 * PI / 180.0) * 2.0,
            planeWidth = planeHeight * (ubo.screenSize.x / ubo.screenSize.y);
    vec3    viewParams = vec3( planeWidth, planeHeight, ubo.focusDistance );

    vec3    focusPointLocal = vec3(uv - 0.5, 1) * viewParams,
            focusPoint = (frame.localToWorld * vec4(focusPointLocal, 1)).xyz,
            camUp = normalize(frame.localToWorld[1].xyz),
            camRight = normalize(frame.localToWorld[0].xyz);

    // Fire rays
    vec3 totalIncomingLight = vec3(0);

    for ( int i = 0; i < ubo.raysPerFrag; i++ )
    {
        Ray ray;
        ray.destroyed = false;

        // Calculate ray origin and dir
        vec2 jitter = randVecCartesianNormDist(seed) * ubo.divergeStrength / ubo.screenSize.x;
        vec3 focusPointJittered = focusPoint + camRight*jitter.x + camUp*jitter.y;

        // Trace rays
        ray.origin = frame.cameraPos;
        ray.dir = normalize(focusPointJittered - ray.origin);
        totalIncomingLight += Trace(ray, seed);
    }
    
    // Return final color (average of the frag's rays)
    vec3 fragCol = totalIncomingLight / ubo.raysPerFrag;
    imageStore(image, ivec2(gl_GlobalInvocationID.xy), vec4( fragCol, 1 ));
}